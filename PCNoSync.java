import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;

public class PCNoSync {
  // Buffer ‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î 4 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
  private static ArrayList<String> buffer = new ArrayList<>();
  private static final int BUFFER_SIZE = 4;

  // ‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤ producer ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
  private static boolean isProducerFinished = false;

  public static void main(String[] args) {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á thread: 1 producer ‡πÅ‡∏•‡∏∞ 2 consumer
    Thread producer = new Thread(new Producer());
    Thread consumer1 = new Thread(new Consumer("Consumer-1"));
    Thread consumer2 = new Thread(new Consumer("Consumer-2"));

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á thread ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    producer.start();
    consumer1.start();
    consumer2.start();

    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ thread ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à
    try {
      producer.join();
      consumer1.join();
      consumer2.join();
    } catch (InterruptedException e) {
      System.out.println("ERROR: " + e.getMessage());
    }
  }

  // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏™‡πà‡∏•‡∏á‡πÉ‡∏ô‡∏ö‡∏±‡∏ü‡πÄ‡∏ü‡∏≠‡∏£‡πå
  static class Producer implements Runnable {
    @Override
    public void run() {
      try {
        // ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå data.txt ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        BufferedReader reader = new BufferedReader(new FileReader("data.txt"));
        String line;

        // ‡∏≠‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡∏•‡∏∞‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏´‡∏°‡∏î‡πÑ‡∏ü‡∏•‡πå
        while ((line = reader.readLine()) != null) {
          // ‡πÅ‡∏¢‡∏Å‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ )
          if (line.contains(")")) {
            line = line.substring(line.indexOf(")") + 1);
          }

          // ‡∏£‡∏≠‡∏ñ‡πâ‡∏≤‡∏ö‡∏±‡∏ü‡πÄ‡∏ü‡∏≠‡∏£‡πå‡πÄ‡∏ï‡πá‡∏° (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ critical section)
          while (buffer.size() >= BUFFER_SIZE) {
            Thread.yield(); // ‡∏™‡∏•‡∏±‡∏ö‡πÉ‡∏´‡πâ thread ‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
          }

          // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡∏ö‡∏±‡∏ü‡πÄ‡∏ü‡∏≠‡∏£‡πå
          buffer.add(line);
          System.out.println("Producer: add '" + line + "' put in Buffer");
        }

        reader.close();

        isProducerFinished = true;
        System.out.println("EOF üí°");

      } catch (IOException e) {
        System.out.println("error read file: " + e.getMessage());
      }
    }
  }

  // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ö‡∏±‡∏ü‡πÄ‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
  static class Consumer implements Runnable {
    private String name;

    public Consumer(String name) {
      this.name = name;
    }

    @Override
    public void run() {
      while (true) {
        String data = null;

        // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ö‡∏±‡∏ü‡πÄ‡∏ü‡∏≠‡∏£‡πå
        if (!buffer.isEmpty()) {
          // ‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ö‡∏±‡∏ü‡πÄ‡∏ü‡∏≠‡∏£‡πå
          data = buffer.get(0);
          buffer.remove(0);

          // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ó‡∏µ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ ‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡∏£‡∏£‡∏Ñ ‡πÅ‡∏•‡∏∞‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ 10ms
          System.out.print(name + " Read: ");
          for (char c : data.toCharArray()) {
            System.out.print(c + " ");
            try {
              Thread.sleep(10);
            } catch (InterruptedException e) {
              System.out.println("Error: " + e.getMessage());
            }
          }
          System.out.println();

        } else if (isProducerFinished && buffer.isEmpty()) {
          // ‡∏ñ‡πâ‡∏≤ producer ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ü‡πÄ‡∏ü‡∏≠‡∏£‡πå‡∏ß‡πà‡∏≤‡∏á ‡πÉ‡∏´‡πâ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
          System.out.println(name + ": DONE üëç");
          break;
        } else {
          // ‡∏ñ‡πâ‡∏≤‡∏ö‡∏±‡∏ü‡πÄ‡∏ü‡∏≠‡∏£‡πå‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏ï‡πà producer ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à ‡πÉ‡∏´‡πâ‡∏£‡∏≠
          Thread.yield();
        }
      }
    }
  }
}